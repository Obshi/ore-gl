/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/gl/js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/gl9/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/matrixgl/lib/float32vector.js":
/*!****************************************************!*\
  !*** ./node_modules/matrixgl/lib/float32vector.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vector_base_1 = __webpack_require__(/*! ./vector_base */ \"./node_modules/matrixgl/lib/vector_base.js\");\n/**\n * A 2-dimensional vector of single-precision float numbers.\n */\nvar Float32Vector2 = /** @class */ (function (_super) {\n    __extends(Float32Vector2, _super);\n    function Float32Vector2(x, y) {\n        var _this = _super.call(this) || this;\n        _this._values = new Float32Array([x, y]);\n        return _this;\n    }\n    /**\n     * Add `other` to the vector and returns new `Float32Vector2`.\n     *\n     * This method does not mutate the vector.\n     * @param {Float32Vector2} other\n     * @returns {Float32Vector2}\n     */\n    Float32Vector2.prototype.add = function (other) {\n        return new Float32Vector2(this.x + other.x, this.y + other.y);\n    };\n    /**\n     * Subtract `other` from the vector and returns new `Float32Vector2`.\n     *\n     * This method does not mutate the vector.\n     * @param {Float32Vector2} other\n     * @returns {Float32Vector2}\n     */\n    Float32Vector2.prototype.sub = function (other) {\n        return new Float32Vector2(this.x - other.x, this.y - other.y);\n    };\n    /**\n     * Multiply the vector by `scalar` and returns new `Float32Vector2`.\n     *\n     * This method does not mutate the vector.\n     * @param {number} scalar\n     * @returns {Float32Vector2}\n     */\n    Float32Vector2.prototype.mulByScalar = function (scalar) {\n        return new Float32Vector2(this.x * scalar, this.y * scalar);\n    };\n    return Float32Vector2;\n}(vector_base_1.Vector2Base));\nexports.Float32Vector2 = Float32Vector2;\n/**\n * A 3-dimensional vector of single-precision float numbers.\n */\nvar Float32Vector3 = /** @class */ (function (_super) {\n    __extends(Float32Vector3, _super);\n    function Float32Vector3(x, y, z) {\n        var _this = _super.call(this) || this;\n        _this._values = new Float32Array([x, y, z]);\n        return _this;\n    }\n    /**\n     * Add `other` to the vector and returns new `Float32Vector3`.\n     *\n     * This method does not mutate the vector.\n     * @param {Float32Vector3} other\n     * @returns {Float32Vector3}\n     */\n    Float32Vector3.prototype.add = function (other) {\n        return new Float32Vector3(this.x + other.x, this.y + other.y, this.z + other.z);\n    };\n    /**\n     * Subtract `other` from the vector and returns new `Float32Vector3`.\n     *\n     * This method does not mutate the vector.\n     * @param {Float32Vector3} other\n     * @returns {Float32Vector3}\n     */\n    Float32Vector3.prototype.sub = function (other) {\n        return new Float32Vector3(this.x - other.x, this.y - other.y, this.z - other.z);\n    };\n    /**\n     * Multiply the vector by `scalar` and returns new `Float32Vector3`.\n     *\n     * This method does not mutate the vector.\n     * @param {number} scalar\n     * @returns {Float32Vector3}\n     */\n    Float32Vector3.prototype.mulByScalar = function (scalar) {\n        return new Float32Vector3(this.x * scalar, this.y * scalar, this.z * scalar);\n    };\n    /**\n     * Calculate dot product.\n     * @param {Float32Vector3} other\n     * @returns {number}\n     */\n    Float32Vector3.prototype.dot = function (other) {\n        return this.x * other.x + this.y * other.y + this.z * other.z;\n    };\n    /**\n     * Calculate cross product.\n     * @param {Float32Vector3} other\n     * @returns {Float32Vector3}\n     */\n    Float32Vector3.prototype.cross = function (other) {\n        var cx = this.y * other.z - this.z * other.y;\n        var cy = this.z * other.x - this.x * other.z;\n        var cz = this.x * other.y - this.y * other.x;\n        return new Float32Vector3(cx, cy, cz);\n    };\n    /**\n     * Normalize the vector and returns new `Float32Vector3`.\n     *\n     * This method does not mutate the vector.\n     * @returns {Float32Vector3}\n     */\n    Float32Vector3.prototype.normalize = function () {\n        var mag = this.magnitude;\n        if (mag === 0) {\n            return this;\n        }\n        return new Float32Vector3(this.x / mag, this.y / mag, this.z / mag);\n    };\n    Object.defineProperty(Float32Vector3.prototype, \"xy\", {\n        /**\n         * Returns xy values of the vector as `Float32Vector2`.\n         * @returns {Float32Vector2}\n         */\n        get: function () {\n            return new Float32Vector2(this.x, this.y);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Float32Vector3;\n}(vector_base_1.Vector3Base));\nexports.Float32Vector3 = Float32Vector3;\n/**\n * A 4-dimensional vector of single-precision float numbers.\n */\nvar Float32Vector4 = /** @class */ (function (_super) {\n    __extends(Float32Vector4, _super);\n    function Float32Vector4(x, y, z, w) {\n        var _this = _super.call(this) || this;\n        _this._values = new Float32Array([x, y, z, w]);\n        return _this;\n    }\n    /**\n     * Add `other` to the vector and returns new `Float32Vector4`.\n     *\n     * This method does not mutate the vector.\n     * @param {Float32Vector4} other\n     * @returns {Float32Vector4}\n     */\n    Float32Vector4.prototype.add = function (other) {\n        return new Float32Vector4(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\n    };\n    /**\n     * Subtract `other` from the vector and returns new `Float32Vector4`.\n     *\n     * This method does not mutate the vector.\n     * @param {Float32Vector4} other\n     * @returns {Float32Vector4}\n     */\n    Float32Vector4.prototype.sub = function (other) {\n        return new Float32Vector4(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\n    };\n    /**\n     * Multiply the vector by `scalar` and returns new `Float32Vector4`.\n     *\n     * This method does not mutate the vector.\n     * @param {number} scalar\n     * @returns {Float32Vector4}\n     */\n    Float32Vector4.prototype.mulByScalar = function (scalar) {\n        return new Float32Vector4(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);\n    };\n    Object.defineProperty(Float32Vector4.prototype, \"xyz\", {\n        /**\n         * Returns xyz values of the vector as `Float32Vector3`.\n         * @returns {Float32Vector3}\n         */\n        get: function () {\n            return new Float32Vector3(this.x, this.y, this.z);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Float32Vector4;\n}(vector_base_1.Vector4Base));\nexports.Float32Vector4 = Float32Vector4;\n/**\n * An alias for `Float32Vector2`.\n * @type {Float32Vector2}\n */\nexports.Vector2 = Float32Vector2;\n/**\n * An alias for `Float32Vector3`.\n * @type {Float32Vector3}\n */\nexports.Vector3 = Float32Vector3;\n/**\n * An alias for `Float32Vector4`.\n * @type {Float32Vector4}\n */\nexports.Vector4 = Float32Vector4;\n\n\n//# sourceURL=webpack:///./node_modules/matrixgl/lib/float32vector.js?");

/***/ }),

/***/ "./node_modules/matrixgl/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/matrixgl/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./float32vector */ \"./node_modules/matrixgl/lib/float32vector.js\"));\n__export(__webpack_require__(/*! ./matrix */ \"./node_modules/matrixgl/lib/matrix.js\"));\n__export(__webpack_require__(/*! ./quaternion */ \"./node_modules/matrixgl/lib/quaternion.js\"));\n\n\n//# sourceURL=webpack:///./node_modules/matrixgl/lib/index.js?");

/***/ }),

/***/ "./node_modules/matrixgl/lib/matrix.js":
/*!*********************************************!*\
  !*** ./node_modules/matrixgl/lib/matrix.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar quaternion_1 = __webpack_require__(/*! ./quaternion */ \"./node_modules/matrixgl/lib/quaternion.js\");\n/**\n * 2x2 Matrix of single-precision float numbers.\n *\n * Values are stored in column major order.\n */\nvar Matrix2x2 = /** @class */ (function () {\n    function Matrix2x2(m11, m21, m12, m22) {\n        this._values = new Float32Array([\n            m11, m21,\n            m12, m22\n        ]);\n    }\n    /**\n     * Returns an identity matrix.\n     * @returns {Matrix2x2}\n     */\n    Matrix2x2.identity = function () {\n        return new Matrix2x2(1.0, 0.0, 0.0, 1.0);\n    };\n    Object.defineProperty(Matrix2x2.prototype, \"values\", {\n        get: function () {\n            return this._values;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Matrix2x2.prototype.toString = function () {\n        return this._values.toString();\n    };\n    return Matrix2x2;\n}());\nexports.Matrix2x2 = Matrix2x2;\n/**\n * 3x3 Matrix of single-precision float numbers.\n *\n * Values are stored in column major order.\n */\nvar Matrix3x3 = /** @class */ (function () {\n    function Matrix3x3(m11, m21, m31, m12, m22, m32, m13, m23, m33) {\n        this._values = new Float32Array([\n            m11, m21, m31,\n            m12, m22, m32,\n            m13, m23, m33\n        ]);\n    }\n    /**\n     * Returns an identity matrix.\n     * @returns {Matrix3x3}\n     */\n    Matrix3x3.identity = function () {\n        return new Matrix3x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);\n    };\n    Object.defineProperty(Matrix3x3.prototype, \"values\", {\n        get: function () {\n            return this._values;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Matrix3x3.prototype.toString = function () {\n        return this._values.toString();\n    };\n    return Matrix3x3;\n}());\nexports.Matrix3x3 = Matrix3x3;\n/**\n * 4x4 Matrix of single-precision float numbers.\n *\n * Values are stored in column major order.\n */\nvar Matrix4x4 = /** @class */ (function () {\n    function Matrix4x4(m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44) {\n        this._values = new Float32Array([\n            m11, m21, m31, m41,\n            m12, m22, m32, m42,\n            m13, m23, m33, m43,\n            m14, m24, m34, m44\n        ]);\n    }\n    /**\n     * Returns an identity matrix.\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.identity = function () {\n        return new Matrix4x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n    };\n    /**\n     * Returns translation matrix.\n     * @param {number} tx\n     * @param {number} ty\n     * @param {number} tz\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.translation = function (tx, ty, tz) {\n        return new Matrix4x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tx, ty, tz, 1.0);\n    };\n    /**\n     * Returns scaling matrix.\n     * @param {number} sx\n     * @param {number} sy\n     * @param {number} sz\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.scaling = function (sx, sy, sz) {\n        return new Matrix4x4(sx, 0.0, 0.0, 0.0, 0.0, sy, 0.0, 0.0, 0.0, 0.0, sz, 0.0, 0.0, 0.0, 0.0, 1.0);\n    };\n    /**\n     * Returns rotation matrix around x-axis.\n     * @param {number} radian\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.rotationX = function (radian) {\n        var sin = Math.sin(radian);\n        var cos = Math.cos(radian);\n        return new Matrix4x4(1.0, 0.0, 0.0, 0.0, 0.0, cos, sin, 0.0, 0.0, -sin, cos, 0.0, 0.0, 0.0, 0.0, 1.0);\n    };\n    /**\n     * Returns rotation matrix around y-axis.\n     * @param {number} radian\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.rotationY = function (radian) {\n        var sin = Math.sin(radian);\n        var cos = Math.cos(radian);\n        return new Matrix4x4(cos, 0.0, -sin, 0.0, 0.0, 1.0, 0.0, 0.0, sin, 0.0, cos, 0.0, 0.0, 0.0, 0.0, 1.0);\n    };\n    /**\n     * Returns rotation matrix around z-axis.\n     * @param {number} radian\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.rotationZ = function (radian) {\n        var sin = Math.sin(radian);\n        var cos = Math.cos(radian);\n        return new Matrix4x4(cos, sin, 0.0, 0.0, -sin, cos, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n    };\n    /**\n     * Returns rotation matrix around `normalizedAxis`. `normalizedAxis` must be normalized.\n     * @param {Float32Vector3} normalizedAxis\n     * @param {number} radian\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.rotationAround = function (normalizedAxis, radian) {\n        var q = quaternion_1.Quaternion.rotationAround(normalizedAxis, radian);\n        return q.toRotationMatrix4();\n    };\n    /**\n     * Returns \"look at\" matrix.\n     * @param {Float32Vector3} cameraPosition\n     * @param {Float32Vector3} lookAtPosition\n     * @param {Float32Vector3} cameraUp\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.lookAt = function (cameraPosition, lookAtPosition, cameraUp) {\n        var zAxis = cameraPosition.sub(lookAtPosition).normalize();\n        var xAxis = cameraUp.cross(zAxis).normalize();\n        var yAxis = zAxis.cross(xAxis).normalize();\n        return new Matrix4x4(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, -cameraPosition.dot(xAxis), -cameraPosition.dot(yAxis), -cameraPosition.dot(zAxis), 1.0);\n    };\n    /**\n     * Returns an orthographic projection matrix.\n     * @param {{top: number; bottom: number; left: number; right: number; near: number; far: number}} argsObject\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.orthographic = function (argsObject) {\n        var top = argsObject.top;\n        var bottom = argsObject.bottom;\n        var left = argsObject.left;\n        var right = argsObject.right;\n        var near = argsObject.near;\n        var far = argsObject.far;\n        return new Matrix4x4(2 / (right - left), 0.0, 0.0, 0.0, 0.0, 2 / (top - bottom), 0.0, 0.0, 0.0, 0.0, -2 / (far - near), 0.0, -(right + left) / (right - left), -(top + bottom) / (top - bottom), -(far + near) / (far - near), 1.0);\n    };\n    /**\n     * Returns a frustrum projection matrix.\n     * @param {{top: number; bottom: number; left: number; right: number; near: number; far: number}} argsObject\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.frustum = function (argsObject) {\n        var top = argsObject.top;\n        var bottom = argsObject.bottom;\n        var left = argsObject.left;\n        var right = argsObject.right;\n        var near = argsObject.near;\n        var far = argsObject.far;\n        return new Matrix4x4(2 * near / (right - left), 0.0, 0.0, 0.0, 0.0, 2 * near / (top - bottom), 0.0, 0.0, (right + left) / (right - left), (top + bottom) / (top - bottom), -(far + near) / (far - near), -1.0, 0.0, 0.0, -2 * far * near / (far - near), 0.0);\n    };\n    /**\n     * Returns a perspective projection matrix.\n     * @param {{fovY: number; aspect: number; near: number; far: number}} argsObject\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.perspective = function (argsObject) {\n        var top = argsObject.near * Math.tan(argsObject.fovYRadian * 0.5);\n        var height = top * 2;\n        var width = argsObject.aspectRatio * height;\n        var left = -0.5 * width;\n        var right = left + width;\n        var bottom = top - height;\n        return Matrix4x4.frustum({\n            top: top,\n            bottom: bottom,\n            left: left,\n            right: right,\n            near: argsObject.near,\n            far: argsObject.far\n        });\n    };\n    /**\n     * Multiply by `other` matrix and returns a product.\n     *\n     * This method does not mutate the matrix.\n     * @param {Matrix4x4} other\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.prototype.mulByMatrix4x4 = function (other) {\n        var m11 = this._values[0];\n        var m12 = this._values[4];\n        var m13 = this._values[8];\n        var m14 = this._values[12];\n        var m21 = this._values[1];\n        var m22 = this._values[5];\n        var m23 = this._values[9];\n        var m24 = this._values[13];\n        var m31 = this._values[2];\n        var m32 = this._values[6];\n        var m33 = this._values[10];\n        var m34 = this._values[14];\n        var m41 = this._values[3];\n        var m42 = this._values[7];\n        var m43 = this._values[11];\n        var m44 = this._values[15];\n        var o11 = other.values[0];\n        var o12 = other.values[4];\n        var o13 = other.values[8];\n        var o14 = other.values[12];\n        var o21 = other.values[1];\n        var o22 = other.values[5];\n        var o23 = other.values[9];\n        var o24 = other.values[13];\n        var o31 = other.values[2];\n        var o32 = other.values[6];\n        var o33 = other.values[10];\n        var o34 = other.values[14];\n        var o41 = other.values[3];\n        var o42 = other.values[7];\n        var o43 = other.values[11];\n        var o44 = other.values[15];\n        var p11 = (m11 * o11) + (m12 * o21) + (m13 * o31) + (m14 * o41);\n        var p12 = (m11 * o12) + (m12 * o22) + (m13 * o32) + (m14 * o42);\n        var p13 = (m11 * o13) + (m12 * o23) + (m13 * o33) + (m14 * o43);\n        var p14 = (m11 * o14) + (m12 * o24) + (m13 * o34) + (m14 * o44);\n        var p21 = (m21 * o11) + (m22 * o21) + (m23 * o31) + (m24 * o41);\n        var p22 = (m21 * o12) + (m22 * o22) + (m23 * o32) + (m24 * o42);\n        var p23 = (m21 * o13) + (m22 * o23) + (m23 * o33) + (m24 * o43);\n        var p24 = (m21 * o14) + (m22 * o24) + (m23 * o34) + (m24 * o44);\n        var p31 = (m31 * o11) + (m32 * o21) + (m33 * o31) + (m34 * o41);\n        var p32 = (m31 * o12) + (m32 * o22) + (m33 * o32) + (m34 * o42);\n        var p33 = (m31 * o13) + (m32 * o23) + (m33 * o33) + (m34 * o43);\n        var p34 = (m31 * o14) + (m32 * o24) + (m33 * o34) + (m34 * o44);\n        var p41 = (m41 * o11) + (m42 * o21) + (m43 * o31) + (m44 * o41);\n        var p42 = (m41 * o12) + (m42 * o22) + (m43 * o32) + (m44 * o42);\n        var p43 = (m41 * o13) + (m42 * o23) + (m43 * o33) + (m44 * o43);\n        var p44 = (m41 * o14) + (m42 * o24) + (m43 * o34) + (m44 * o44);\n        return new Matrix4x4(p11, p21, p31, p41, p12, p22, p32, p42, p13, p23, p33, p43, p14, p24, p34, p44);\n    };\n    /**\n     * An alias for `mulByMatrix4x4`.\n     * @param {Matrix4x4} other\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.prototype.mulByMatrix4 = function (other) {\n        return this.mulByMatrix4x4(other);\n    };\n    /**\n     * Translate the matrix and returns new `Matrix4x4`.\n     *\n     * This method does not mutate the matrix.\n     * @param {number} tx\n     * @param {number} ty\n     * @param {number} tz\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.prototype.translate = function (tx, ty, tz) {\n        var t = Matrix4x4.translation(tx, ty, tz);\n        return this.mulByMatrix4x4(t);\n    };\n    /**\n     * Scale the matrix and returns new `Matrix4x4`.\n     * @param {number} sx\n     * @param {number} sy\n     * @param {number} sz\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.prototype.scale = function (sx, sy, sz) {\n        var s = Matrix4x4.scaling(sx, sy, sz);\n        return this.mulByMatrix4x4(s);\n    };\n    /**\n     * Rotate the matrix around x-axis and returns new `Matrix4x4`.\n     *\n     * This method does not mutate the matrix.\n     * @param {number} radian\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.prototype.rotateX = function (radian) {\n        var rx = Matrix4x4.rotationX(radian);\n        return this.mulByMatrix4x4(rx);\n    };\n    /**\n     * Rotate the matrix around y-axis and returns new `Matrix4x4`.\n     *\n     * This method does not mutate the matrix.\n     * @param {number} radian\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.prototype.rotateY = function (radian) {\n        var ry = Matrix4x4.rotationY(radian);\n        return this.mulByMatrix4x4(ry);\n    };\n    /**\n     * Rotate the matrix around z-axis and returns new `Matrix4x4`.\n     *\n     * This method does not mutate the matrix.\n     * @param {number} radian\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.prototype.rotateZ = function (radian) {\n        var rz = Matrix4x4.rotationZ(radian);\n        return this.mulByMatrix4x4(rz);\n    };\n    /**\n     * Rotate the matrix around the `normalizedAxis` and return new Matrix4x4.\n     *\n     * This method does not mutate the matrix.\n     * @param {Float32Vector3} normalizedAxis\n     * @param {number} radian\n     * @returns {Matrix4x4}\n     */\n    Matrix4x4.prototype.rotateAround = function (normalizedAxis, radian) {\n        var r = Matrix4x4.rotationAround(normalizedAxis, radian);\n        return this.mulByMatrix4x4(r);\n    };\n    Object.defineProperty(Matrix4x4.prototype, \"values\", {\n        get: function () {\n            return this._values;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Matrix4x4.prototype.toString = function () {\n        return this._values.toString();\n    };\n    return Matrix4x4;\n}());\nexports.Matrix4x4 = Matrix4x4;\n/**\n * An alias for `Matrix2x2`.\n * @type {Matrix2x2}\n */\nexports.Matrix2 = Matrix2x2;\n/**\n * An alias for `Matrix3x3`.\n * @type {Matrix3x3}\n */\nexports.Matrix3 = Matrix3x3;\n/**\n * An alias for `Matrix4x4`.\n * @type {Matrix4x4}\n */\nexports.Matrix4 = Matrix4x4;\n\n\n//# sourceURL=webpack:///./node_modules/matrixgl/lib/matrix.js?");

/***/ }),

/***/ "./node_modules/matrixgl/lib/quaternion.js":
/*!*************************************************!*\
  !*** ./node_modules/matrixgl/lib/quaternion.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar matrix_1 = __webpack_require__(/*! ./matrix */ \"./node_modules/matrixgl/lib/matrix.js\");\n/**\n * Quaternion which is 4-dimensional complex number.\n * See [Wikipedia](https://en.wikipedia.org/wiki/Quaternion).\n */\nvar Quaternion = /** @class */ (function () {\n    function Quaternion(x, y, z, w) {\n        this._values = new Float32Array([x, y, z, w]);\n    }\n    /**\n     * Create a rotation quaternion around `normalizedAxis`.\n     * `normalizedAxis` must be normalized.\n     * @param {Float32Vector3} normalizedAxis\n     * @param {number} radian\n     * @returns {Quaternion}\n     */\n    Quaternion.rotationAround = function (normalizedAxis, radian) {\n        var sin = Math.sin(radian / 2.0);\n        var cos = Math.cos(radian / 2.0);\n        return new Quaternion(normalizedAxis.x * sin, normalizedAxis.y * sin, normalizedAxis.z * sin, cos);\n    };\n    /**\n     * Returns a normalized quaternion.\n     * @returns {Quaternion}\n     */\n    Quaternion.prototype.normalize = function () {\n        var mag = this.magnitude;\n        if (mag === 0) {\n            return this;\n        }\n        var r = 1 / mag;\n        return new Quaternion(this.x * r, this.y * r, this.z * r, this.w * r);\n    };\n    /**\n     * Adds the `other` to the quaternion and returns the sum.\n     *\n     * This method does not mutate the quaternion.\n     * @param {Quaternion} other\n     * @returns {Quaternion}\n     */\n    Quaternion.prototype.add = function (other) {\n        return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\n    };\n    /**\n     * Multiplies the quaternion by `scalar` and returns the product.\n     *\n     * This method does not mutate the quaternion.\n     * @param {number} scalar\n     * @returns {Quaternion}\n     */\n    Quaternion.prototype.mulByScalar = function (scalar) {\n        return new Quaternion(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);\n    };\n    /**\n     * Calculates dot product.\n     * @param {Quaternion} other\n     * @returns {number}\n     */\n    Quaternion.prototype.dot = function (other) {\n        return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;\n    };\n    /**\n     * Calculates spherical linear interpolation(also known as Slerp) and returns new `Quaternion` between the quaternion and the other.\n     * @param {Quaternion} other\n     * @param {number} t 0.0 <= t <= 1.0\n     * @param {{chooseShorterAngle: boolean}} options Does not work currently. slerp chooses shorter angle regardless of this value.\n     * @returns {Quaternion}\n     */\n    Quaternion.prototype.slerp = function (other, t, options) {\n        if (options === void 0) { options = { chooseShorterAngle: true }; }\n        var dotProd = this.dot(other);\n        var otherQuaternion = other;\n        // When the dot product is negative, slerp chooses the longer way.\n        // So we should negate the `other` quaternion.\n        if (dotProd < 0) {\n            dotProd = -dotProd;\n            otherQuaternion = other.mulByScalar(-1);\n        }\n        var omega = Math.acos(dotProd);\n        var sinOmega = Math.sin(omega);\n        var q1 = this.mulByScalar(Math.sin((1 - t) * omega) / sinOmega);\n        var q2 = otherQuaternion.mulByScalar(Math.sin(t * omega) / sinOmega);\n        return q1.add(q2);\n    };\n    Object.defineProperty(Quaternion.prototype, \"magnitude\", {\n        /**\n         * Calc magnitude of the quaternion.\n         * @returns {number}\n         */\n        get: function () {\n            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Quaternion.prototype, \"norm\", {\n        /**\n         * Calc norm of the quaternion.\n         * An alias for `magnitude`.\n         * @returns {number}\n         */\n        get: function () {\n            return this.magnitude;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Quaternion.prototype, \"x\", {\n        /**\n         * Returns x value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[0];\n        },\n        /**\n         * Set the `value` as new x.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[0] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Quaternion.prototype, \"y\", {\n        /**\n         * Returns y value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[1];\n        },\n        /**\n         * Set the `value` as new y.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[1] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Quaternion.prototype, \"z\", {\n        /**\n         * Returns z value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[2];\n        },\n        /**\n         * Set the `value` as new z.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[2] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Quaternion.prototype, \"w\", {\n        /**\n         * Returns w value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[3];\n        },\n        /**\n         * Set the `value` as new w.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[3] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Quaternion.prototype, \"values\", {\n        /**\n         * Returns values of the quaternion.\n         * @returns {Float32Array}\n         */\n        get: function () {\n            return this._values;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Convert the quaternion to a rotation matrix.\n     * @returns {Matrix4x4}\n     */\n    Quaternion.prototype.toRotationMatrix4 = function () {\n        var x = this.x;\n        var y = this.y;\n        var z = this.z;\n        var w = this.w;\n        var m11 = 1 - 2 * y * y - 2 * z * z;\n        var m12 = 2 * x * y - 2 * w * z;\n        var m13 = 2 * x * z + 2 * w * y;\n        var m14 = 0;\n        var m21 = 2 * x * y + 2 * w * z;\n        var m22 = 1 - 2 * x * x - 2 * z * z;\n        var m23 = 2 * y * z - 2 * w * x;\n        var m24 = 0;\n        var m31 = 2 * x * z - 2 * w * y;\n        var m32 = 2 * y * z + 2 * w * x;\n        var m33 = 1 - 2 * x * x - 2 * y * y;\n        var m34 = 0;\n        var m41 = 0;\n        var m42 = 0;\n        var m43 = 0;\n        var m44 = 1;\n        return new matrix_1.Matrix4x4(m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44);\n    };\n    /**\n     * Returns values as `String`.\n     * @returns {string}\n     */\n    Quaternion.prototype.toString = function () {\n        return \"Quaternion(\" + this.x + \", \" + this.y + \", \" + this.z + \", \" + this.w + \")\";\n    };\n    return Quaternion;\n}());\nexports.Quaternion = Quaternion;\n\n\n//# sourceURL=webpack:///./node_modules/matrixgl/lib/quaternion.js?");

/***/ }),

/***/ "./node_modules/matrixgl/lib/vector_base.js":
/*!**************************************************!*\
  !*** ./node_modules/matrixgl/lib/vector_base.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An abstract class for vectors.\n */\nvar VectorBase = /** @class */ (function () {\n    function VectorBase() {\n    }\n    Object.defineProperty(VectorBase.prototype, \"values\", {\n        get: function () {\n            return this._values;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VectorBase.prototype, \"magnitude\", {\n        get: function () {\n            var sumSq = this._values.reduce(function (prev, current) { return prev + (Math.pow(current, 2)); }, 0);\n            return Math.sqrt(sumSq);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VectorBase.prototype.toString = function () {\n        var dimension = this._values.length;\n        return \"Vector\" + dimension + \"(\" + this._values.join(', ') + \")\";\n    };\n    return VectorBase;\n}());\nexports.VectorBase = VectorBase;\n/**\n * A base abstract class for 2-dimensional vectors.\n */\nvar Vector2Base = /** @class */ (function (_super) {\n    __extends(Vector2Base, _super);\n    function Vector2Base() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(Vector2Base.prototype, \"x\", {\n        /**\n         * Returns x value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[0];\n        },\n        /**\n         * Set the `value` as new x.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[0] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vector2Base.prototype, \"y\", {\n        /**\n         * Returns y value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[1];\n        },\n        /**\n         * Set the `value` as new y.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[1] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Vector2Base;\n}(VectorBase));\nexports.Vector2Base = Vector2Base;\n/**\n * A base abstract class for 3-dimensional vectors.\n */\nvar Vector3Base = /** @class */ (function (_super) {\n    __extends(Vector3Base, _super);\n    function Vector3Base() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(Vector3Base.prototype, \"x\", {\n        /**\n         * Returns x value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[0];\n        },\n        /**\n         * Set the `value` as new x.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[0] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vector3Base.prototype, \"y\", {\n        /**\n         * Returns y value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[1];\n        },\n        /**\n         * Set the `value` as new y.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[1] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vector3Base.prototype, \"z\", {\n        /**\n         * Returns z value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[2];\n        },\n        /**\n         * Set the `value` as new z.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[2] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Vector3Base;\n}(VectorBase));\nexports.Vector3Base = Vector3Base;\n/**\n * A base abstract class for 4-dimensional vectors.\n */\nvar Vector4Base = /** @class */ (function (_super) {\n    __extends(Vector4Base, _super);\n    function Vector4Base() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(Vector4Base.prototype, \"x\", {\n        /**\n         * Returns x value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[0];\n        },\n        /**\n         * Set the `value` as new x.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[0] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vector4Base.prototype, \"y\", {\n        /**\n         * Returns y value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[1];\n        },\n        /**\n         * Set the `value` as new y.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[1] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vector4Base.prototype, \"z\", {\n        /**\n         * Returns z value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[2];\n        },\n        /**\n         * Set the `value` as new z.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[2] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vector4Base.prototype, \"w\", {\n        /**\n         * Returns w value of the vector.\n         * @returns {number}\n         */\n        get: function () {\n            return this._values[3];\n        },\n        /**\n         * Set the `value` as new w.\n         * @param {number} value\n         */\n        set: function (value) {\n            this._values[3] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Vector4Base;\n}(VectorBase));\nexports.Vector4Base = Vector4Base;\n\n\n//# sourceURL=webpack:///./node_modules/matrixgl/lib/vector_base.js?");

/***/ }),

/***/ "./src/gl9/js/GLPower.js":
/*!*******************************!*\
  !*** ./src/gl9/js/GLPower.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const ProParam = __webpack_require__(/*! ./ProParam */ \"./src/gl9/js/ProParam.js\");\n\nmodule.exports = class GLpower{\n    constructor(canvas,color){\n        this.gl = canvas.getContext('webgl');\n        this.canvas = canvas;\n        this.program = [];\n        this.fBuffer = {};\n        this.currentProgram;\n        this.ext;\n\n        this.gl.enable(this.gl.BLEND);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\n        this.gl.clearColor(color.r,color.g,color.b,1);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n        this.ext = this.getWebGLExtensions();\n\n        this.screenVBO = this.cVBO([\n            -1.0,  1.0,  0.0, \n             1.0,  1.0,  0.0, \n            -1.0, -1.0,  0.0, \n             1.0, -1.0,  0.0  \n        ]);\n        \n        this.screenIBO = this.cIBO([\n            0,1,2,1,3,2\n        ]);\n\n    }\n\n    getProgram(vsSource,fsSource){\n        var vs = this.cShader(vsSource,this.gl.VERTEX_SHADER);\n        var fs = this.cShader(fsSource,this.gl.FRAGMENT_SHADER);\n        \n        this.program.push(new ProParam(this.cProgram(vs,fs)));\n        return this.program.length - 1;\n    }\n\n    cShader(source,type){\n        var shader = this.gl.createShader(type);\n        this.gl.shaderSource(shader,source);\n        this.gl.compileShader(shader);\n    \n        if(this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)){\n            return shader;\n        }else{\n            console.log(this.gl.getShaderInfoLog(shader));\n            return null;\n        }\n    }\n    \n    cProgram(v,f){\n        let p = this.gl.createProgram();\n        this.gl.attachShader(p,v);\n        this.gl.attachShader(p,f);\n        this.gl.linkProgram(p);\n        \n        if(this.gl.getProgramParameter(p, this.gl.LINK_STATUS)){\n            this.gl.useProgram(p);\n            return p;\n        }else{\n            console.log(alert(this.gl.getProgramInfoLog(p)));\n            return null;\n        }\n    }\n\n    addAttribute(prgIndex,name,stride){\n        this.program[prgIndex].attLocation[name] = this.gl.getAttribLocation(this.program[prgIndex].program,name);\n        this.program[prgIndex].attStride[name] = stride;\n        \n    }\n\n    setAttribute(name,vbo,ibo){\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER,vbo.data);\n        this.gl.enableVertexAttribArray(this.currentProgram.attLocation[name]);\n        this.gl.vertexAttribPointer(this.currentProgram.attLocation[name], this.currentProgram.attStride[name], this.gl.FLOAT, false, 0, 0);\n        this.currentProgram.VBOLength = vbo.length / this.currentProgram.attStride[name];\n        if(ibo){\n            this.currentProgram.indexLength = ibo.length;\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, ibo.data);\n        }\n    }\n\n    addUniform(prgIndex,name,type){\n        this.program[prgIndex].uniLocation[name] = this.gl.getUniformLocation(this.program[prgIndex].program,name);\n        this.program[prgIndex].uniType[name] = type;\n    }\n\n    setUniform(name,data){\n        let type = this.currentProgram.uniType[name];\n        switch(type){\n            case 'uniformMatrix4fv':\n                this.gl[type](this.currentProgram.uniLocation[name],false,data);\n                break;\n            default:\n                this.gl[type](this.currentProgram.uniLocation[name],data);\n        }\n    }\n\n    cVBO(data){\n        let vbo = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbo);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(data), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return {data : vbo,length: data.length};\n    }\n    \n    cIBO(data){\n        let ibo = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, ibo);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Int16Array(data), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n        return {data : ibo,length : data.length};\n    }\n\n    cFbuffer(width,height,texUnit,floatMode = false){\n        if(floatMode){\n            this.fBuffer[texUnit] = this.getFbufferFloat(width,height,texUnit);\n        }else{\n            this.fBuffer[texUnit] = this.getFbuffer(width,height,texUnit);\n        }\n       \n        this.gl.bindTexture(this.gl.TEXTURE_2D,this.fBuffer[texUnit].texture);\n        this.gl.clearColor(0,0,0,1);\n    }\n\n    getFbuffer(width,height,texUnit){\n        let frameBuffer = this.gl.createFramebuffer();\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, frameBuffer);\n        let depthRenderBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, depthRenderBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n        this.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, depthRenderBuffer);\n\n        let fTexture = this.gl.createTexture();\n\n        this.gl.activeTexture(this.gl.TEXTURE0 + texUnit);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, fTexture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, width, height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, fTexture, 0);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n        return {framebuffer: frameBuffer, renderbuffer: depthRenderBuffer, texture: fTexture};\n    }\n\n    getFbufferFloat( width, height,texUnit){\n        if(this.ext == null || (this.ext.textureFloat == null && this.ext.textureHalfFloat == null)){\n            console.log('float texture not support');\n            return;\n        }\n\n        // let flg = (this.ext.textureFloat != null) ? this.gl.FLOAT : this.ext.textureHalfFloat.HALF_FLOAT_OES;\n        let flg = this.ext.textureHalfFloat.HALF_FLOAT_OES;\n        let frameBuffer = this.gl.createFramebuffer();\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, frameBuffer);\n        let fTexture = this.gl.createTexture();\n        this.gl.activeTexture(this.gl.TEXTURE0 + texUnit);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, fTexture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, width, height, 0, this.gl.RGBA, flg, null);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, fTexture, 0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n        return {framebuffer: frameBuffer, texture: fTexture};\n    }\n\n    selectFramebuffer(name){\n        if(name == null){\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);\n        }else{\n            if(this.fBuffer[name]){\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.fBuffer[name].framebuffer)\n            }else{\n                console.log(\"unknown fbuffer\");\n                return;\n            }\n        }   \n    }\n\n    selectUseProgram(prgIndex){\n        this.currentProgram = this.program[prgIndex];\n        this.gl.useProgram(this.currentProgram.program);\n    }\n\n    drawArrays(type){\n        this.gl.drawArrays(type, 0, this.currentProgram.VBOLength);\n    }\n\n    drawElements(){\n        this.gl.drawElements(this.gl.TRIANGLES,this.currentProgram.indexLength,this.gl.UNSIGNED_SHORT,0);\n    }\n\n    clear(){\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    }\n\n    flush(){\n        this.gl.flush();\n    }\n\n    getWebGLExtensions(){\n        return {\n            elementIndexUint: this.gl.getExtension('OES_element_index_uint'),\n            textureFloat:     this.gl.getExtension('OES_texture_float'),\n            textureHalfFloat: this.gl.getExtension('OES_texture_half_float')\n        };\n    }\n}\n\n//# sourceURL=webpack:///./src/gl9/js/GLPower.js?");

/***/ }),

/***/ "./src/gl9/js/ProParam.js":
/*!********************************!*\
  !*** ./src/gl9/js/ProParam.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports =  class ProParam{\n    constructor(program){\n        this.program = program;\n        this.attLocation = {};\n        this.attStride = {};\n        this.uniLocation = {};\n        this.uniType = {};\n        this.VBOLength = 0;\n        this.indexLength = 0;\n    }\n}\n\n//# sourceURL=webpack:///./src/gl9/js/ProParam.js?");

/***/ }),

/***/ "./src/gl9/js/main.js":
/*!****************************!*\
  !*** ./src/gl9/js/main.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { Vector3, Vector4, Matrix4 } = __webpack_require__(/*! matrixgl */ \"./node_modules/matrixgl/lib/index.js\");\nconst GLPower = __webpack_require__(/*! ./GLPower */ \"./src/gl9/js/GLPower.js\")\n\nconst renderVert = __webpack_require__(/*! ../shader/renderVert.vs */ \"./src/gl9/shader/renderVert.vs\");\nconst renderFrag= __webpack_require__(/*! ../shader/renderFrag.fs */ \"./src/gl9/shader/renderFrag.fs\");\n\nconst frag = __webpack_require__(/*! ../shader/frag.fs */ \"./src/gl9/shader/frag.fs\");\n\nvar canvas;\nvar glp;\n\nvar scenePrg;\nvar particlePrg;\nvar wholeRenderPrg;\nvar renderPrg;\n\nvar time = 0;\n\nwindow.addEventListener('load',() =>{\n    canvas = document.getElementById(\"canvas\");\n    var dpr = window.devicePixelRatio || 1;\n    dpr = 0.5;\n    canvas.width = window.innerWidth * dpr;\n    canvas.height = window.innerHeight * dpr;\n\n    glp = new GLPower(canvas,{r:0,g:0,b:0});\n\n    wholeRenderPrg = glp.getProgram(renderVert,frag);\n    renderPrg = glp.getProgram(renderVert,renderFrag);\n\n    init();\n},false)\n\nfunction init(){\n\n    glp.addAttribute(wholeRenderPrg,'position',3);\n    glp.addUniform(wholeRenderPrg,'resolution','uniform2fv');\n    glp.addUniform(wholeRenderPrg,'preFrameTex','uniform1i');\n    glp.addUniform(wholeRenderPrg,'time','uniform1f');\n\n    glp.addAttribute(renderPrg,'position',3);\n    glp.addUniform(renderPrg,'texture','uniform1i');\n    glp.addUniform(renderPrg,'resolution','uniform2fv');\n\n    //render buffer\n    glp.cFbuffer(canvas.width,canvas.height,0);\n    glp.cFbuffer(canvas.width,canvas.height,1);\n\n    var selectRBuffer = 0;\n\n    render();\n    \n    function render(){\n        time += 0.01666;\n        \n        const view = Matrix4.lookAt(new Vector3(0,2,5),new Vector3(0,0,0),new Vector3(0,1,0));\n\n        const perspective = Matrix4.perspective({\n            fovYRadian: 60 * Math.PI / 180,\n            aspectRatio: window.innerWidth / window.innerHeight,\n            near: 0.1,\n            far: 10\n        });\n\n        const transform = Matrix4.identity().rotateY(0).scale(2,2,2);\n        const mvp = perspective.mulByMatrix4(view).mulByMatrix4(transform);\n        \n        selectRBuffer = selectRBuffer == 0 ? 1 : 0;\n\n        glp.selectFramebuffer(selectRBuffer);\n        glp.selectUseProgram(wholeRenderPrg);\n        glp.setAttribute(\"position\",glp.screenVBO,glp.screenIBO);\n        glp.setUniform('resolution',[canvas.width,canvas.height]);\n        glp.setUniform('preFrameTex',selectRBuffer == 0 ? 1 : 0);\n        glp.setUniform('time',time);\n        glp.clear();\n        glp.drawElements();\n        glp.flush();\n\n        glp.selectFramebuffer(null);\n        glp.selectUseProgram(renderPrg);\n        glp.setAttribute(\"position\",glp.screenVBO,glp.screenIBO);\n        glp.setUniform('texture',selectRBuffer);\n        glp.setUniform('resolution',[canvas.width,canvas.height]);\n        glp.clear();\n        glp.drawElements();\n        glp.flush();\n\n        requestAnimationFrame(render);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/gl9/js/main.js?");

/***/ }),

/***/ "./src/gl9/shader/frag.fs":
/*!********************************!*\
  !*** ./src/gl9/shader/frag.fs ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"precision highp float;\\n\\nuniform vec2 resolution;\\nuniform float time;\\nuniform sampler2D preFrameTexture; \\n\\n#define PI 3.1415926535\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n  { \\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i); \\n  vec4 p = permute( permute( permute( \\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\nfloat snoise(float x){\\n    return snoise(vec3(0.0,0.0,x));\\n}\\nvec3 snoise3D(vec3 p){\\n    return vec3(\\n        snoise(p + vec3(76.2,35.2,55.2)),\\n        snoise(p + vec3(52.2,453.3,674.2)),\\n        snoise(p + vec3(234.2,47.2,85.2))\\n    );\\n    \\n}\\n\\n/*---------------------\\n    distance func\\n----------------------*/\\n\\nfloat sdSphere( vec3 p, float s )\\n{\\n  return length(p)-s;\\n}\\n\\nfloat sdBox( vec3 p, vec3 b )\\n{\\n  vec3 d = abs(p) - b;\\n  return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0); \\n}\\n\\nfloat sdTorus( vec3 p, vec2 t )\\n{\\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\\n  return length(q)-t.y;\\n}\\n\\nfloat sdCone( vec3 p, vec2 c )\\n{\\n    // c must be normalized\\n    float q = length(p.xy);\\n    return dot(c,vec2(q,p.z));\\n}\\n\\nmat2 rotate(float rad){\\n    return mat2(cos(rad),sin(rad),-sin(rad),cos(rad));\\n}\\n\\nvec3 loop(vec3 p,float s){\\n    p = mod(p,s) - s / 2.0;\\n    return p;\\n}\\n\\nvec3 fold(vec3 p){\\n    p.xy *= rotate(exp(-mod(time * 10.0,6.0)));\\n    p.xz *= rotate(exp(-mod(time * 10.0,8.0)));\\n    for(int i = 0; i < 20; i++){\\n        p.zy = abs(p.zy);\\n        p.xy *= rotate(time * 0.23);\\n        p.xz = abs(p.xz);\\n        p.xz *= rotate(time * 0.3);\\n    }\\n    return p;\\n}\\n\\nfloat distance(vec3 p){\\n    float d;\\n    p = loop(p,8.0);\\n    p = fold(p);\\n    d = sdBox(p - vec3(0.0,0.0,0.0),vec3(1.0,1.0,1.0) * 1.2);\\n\\n    return d;\\n}\\n\\nvec3 getNormal(vec3 p,float d){\\n    vec3 dx = vec3(d,0.0,0.0);\\n    vec3 dy = vec3(0.0,d,0.0);\\n    vec3 dz = vec3(0.0,0.0,d);\\n    vec3 result;\\n    result.x = distance(p + dx) - distance(p - dx);\\n    result.y = distance(p + dy) - distance(p - dy);\\n    result.z = distance(p + dz) - distance(p - dz);\\n    return normalize(result);\\n}\\n\\n// vec3 postProcess(vec3 c){\\n//     pow(max(0.0, dot(vec3(0.0, 0.0, 1.0), ray)), stageFlareExp * 1.25);\\n//     return \\n// }\\nvoid main(void)\\n{\\n    const float angle = 60.0;\\n    const float fov = angle * 0.5 * PI / 180.0;\\n    vec3 cPos = vec3(0.0,0.0,5.0)+ vec3(0.0,0.0,-time * 10.0);\\n\\n\\n    vec2 uv = (gl_FragCoord.xy * 2.0  - resolution ) / min(resolution.x,resolution.y);\\n    vec3 ray = normalize(vec3(sin(fov) * uv.x,sin(fov) * uv.y,-1.0));\\n    ray.xz *= rotate(snoise(time * 0.5 + 303.0) * 0.05);\\n    ray.yz *= rotate(snoise(time * 0.4 ) * 0.05);\\n\\n    float rDistance = 0.0;\\n    float rLen = 0.0;\\n    vec3 p = cPos;\\n    vec3 c = vec3(0.0);\\n    float light = 0.0;\\n\\n    for(int i = 0; i < 64; i++){\\n        rDistance = distance(p);\\n        rLen += rDistance;\\n        light += max(0.0,1.0 - rDistance) * .03;\\n        p = cPos + ray * rLen;\\n    }\\n\\n    if(abs(rDistance) <= 0.01){\\n        vec3 normal = getNormal(p,0.001);\\n        float diff = clamp(dot(vec3(0.5,0.5,0.5), normal), 0.1, 1.0);\\n        \\n        vec3 edge = vec3(length(normal - getNormal(p, 0.09)) * max(0.0,sin(rLen + time * 10.0)) * 10.0);\\n        edge.x += sin(rLen) * 0.7;\\n        \\n        c = vec3(edge + diff * (1.0 - max(0.0,(rLen * 0.03))));\\n    }else{\\n        c = vec3(0.0,0.0,0.0);\\n    }\\n\\n    \\n    gl_FragColor = vec4(c,1.0);\\n}\"\n\n//# sourceURL=webpack:///./src/gl9/shader/frag.fs?");

/***/ }),

/***/ "./src/gl9/shader/renderFrag.fs":
/*!**************************************!*\
  !*** ./src/gl9/shader/renderFrag.fs ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"precision highp float;\\r\\n\\r\\nuniform sampler2D texture;\\r\\nuniform vec2 resolution;\\r\\n\\r\\n\\r\\nvoid main(){\\r\\n    vec2 uv = gl_FragCoord.xy / resolution;\\r\\n    vec3 c = texture2D(texture,uv).xyz;\\r\\n\\r\\n    gl_FragColor = vec4(c,1.0);\\r\\n}\"\n\n//# sourceURL=webpack:///./src/gl9/shader/renderFrag.fs?");

/***/ }),

/***/ "./src/gl9/shader/renderVert.vs":
/*!**************************************!*\
  !*** ./src/gl9/shader/renderVert.vs ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nvoid main(){\\n    gl_Position = vec4(position,1.0);\\n}\\n\"\n\n//# sourceURL=webpack:///./src/gl9/shader/renderVert.vs?");

/***/ })

/******/ });